#!/usr/bin/env python
"""
Publishes a corresponding Odometry and broadcasts transforms

PUBLISHERS: 
    + /odom (Odometry) ~ position and velocity in free space 
    + /sensor_msgs.JointState (sensor_msgs/JointState) ~ the joint positions, velocity, and effort

SUBSCRIBERS:
    + /turtle1/pose (turtlesim/Pose) ~ turtle's current position 

BROADCASTERS:
    + /odom (goemetry_msgs/TransformStamped) ~ broadcasts turtle's transform 

"""

import rospy
from turtlesim.msg import Pose
from nav_msgs.msg import Odometry
import tf2_ros
from tf_conversions import transformations
from geometry_msgs.msg import TransformStamped, Twist, Vector3
from sensor_msgs.msg import JointState

class Simodom():
    """ Publishes odometry and broadcasts transforms 
    """
    def __init__(self):
        rospy.Subscriber("turtle1/pose", Pose, self.broadcast_odom)
        self.pub = rospy.Publisher('/odom', Odometry, queue_size=50)
        self.pub_joint_state = rospy.Publisher("sensor_msgs/JointState", JointState, queue_size = 10)
        self.rate = rospy.Rate(10)
        self.theta = 0
        self.x = 0
        self.y = 0
        self.linear_vel = 0
        self.angular_vel = 0

    def broadcast_odom(self, data):
        """ Function for broadcasting the turtle pose 

        Gets the turtle's current position

        Args: 
            data (Pose) : gets turtle's x, y, and theta coordinates 

        Returns: 
            Odom transform, translation and rotation of transform 
        """

        self.x = data.x
        self.y = data.y
        self.theta = data.theta
        self.linear_vel = data.linear_velocity
        self.angular_vel = data.angular_velocity
        self.broadcaster = tf2_ros.TransformBroadcaster()

        odom = TransformStamped()
        odom.header.stamp = rospy.Time.now()
        odom.header.frame_id = "odom"
        odom.child_frame_id = "base_footprint"

        q1 = transformations.quaternion_from_euler(0, 0 , self.theta)

        odom.transform.translation.x = self.x - 5  
        odom.transform.translation.y = self.y - 5
        odom.transform.translation.z = 0

        odom.transform.rotation.x = q1[0]
        odom.transform.rotation.y = q1[1]
        odom.transform.rotation.z = q1[2]
        odom.transform.rotation.w = q1[3]

        self.broadcaster.sendTransform(odom)

    def publish_odom(self):
        """ Function to publish odometry data 

        Reads turtle position data and publishes odometry and joint states 

        Args: 
            self.x (Pose) : turtle's x coordinate 
            self.y (Pose) : turtle's y coordinate 
            self.theta (Pose) : turtle's theta coordinate 

        Returns: 
            msg and joints, odometry and joint states 
        
        """ 
        msg = Odometry()

        msg.header.stamp = rospy.Time.now()
        msg.header.frame_id = "odom"
        msg.child_frame_id = "base_footprint"

        q2 = transformations.quaternion_from_euler(0, 0, self.theta)

        msg.pose.pose.position.x = self.x - 5
        msg.pose.pose.position.y = self.y - 5
        msg.pose.pose.position.z = 0

        msg.pose.pose.orientation.x = q2[0]
        msg.pose.pose.orientation.y = q2[1]
        msg.pose.pose.orientation.z = q2[2]
        msg.pose.pose.orientation.w = q2[3]

        msg.twist.twist = Twist(Vector3(self.linear_vel, self.angular_vel,0), 
                                Vector3(0, 0, self.theta))
        
        joints = JointState()
        joints.header.stamp = rospy.Time.now()
        joints.header.frame_id = "base_footprint"
        joints.name = ['wheel1', 'wheel2']
        joints.position = [0, 0]
        joints.velocity = [0, 0]
        joints.effort = [0, 0]

        self.pub.publish(msg)
        self.pub_joint_state.publish(joints)

    def run(self):
        """ Function to run the ros publishing loop 
        
        Runs rospy loop

        Returns: 
            publish_odom, function call 
        """
        while not rospy.is_shutdown():
            self.publish_odom()
            self.rate.sleep()

if __name__ == '__main__':
    rospy.init_node("simodom", log_level=rospy.DEBUG)
    sim = Simodom()
    sim.run()
    rospy.spin()
