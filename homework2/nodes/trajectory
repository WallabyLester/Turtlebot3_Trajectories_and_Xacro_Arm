#!/usr/bin/env python

'''
Publishes a message at a fixed frequency, causing the turtlebot or turtlesim to follow a figure eight trajectory

PUBLISHERS:
    + /turtle1/cmd_vel (geometry_msgs/Twist) ~ the movement instructions for the turtle
    + /cmd_vel (geometry_msgs/Twist) ~ the movement instructions for the turtlebot3

SERVICES:
    + /pause (Empty) ~ stops the turtle's motion while allowing the trajectory to be resumed 
    + /resume (Empty) ~ resumes the turtle's motion along the trajectory

PARAMETERS: 
    + /~real ~ private parameter for identifying a turtlebot3 or turtlesim launch
    +/~pub_freq ~ private parameter for publishing frequency 
    +/parameters/width ~ the width of the figure eight 
    +/parameters/height ~ the height of the figure eight 
    +/parameters/period ~ the amount of time for the robot/turtle to complete the figure eight

BROADCASTERS:
     + /static_broadcaster (geometry_msgs/TransformStamped) ~ broadcasts a static transform from the world to odom

'''

import rospy
from std_srvs.srv import Empty, EmptyResponse
from geometry_msgs.msg import Twist, Vector3, TransformStamped
from homework2.comp_traj import FigureEight
import tf2_ros
from tf_conversions import transformations

class Trajectory:
    """ Moves turtle/robot based on Figure Eight trajectories
    """
    def __init__(self):
        self.__pause = rospy.Service("pause", Empty, self.pause) 
        self.__resume = rospy.Service("resume", Empty, self.resume)
        self.__real = rospy.get_param("~real")
        self.__pub_freq = rospy.get_param("~pub_freq")
        self.W = rospy.get_param("parameters/width")
        self.H = rospy.get_param("parameters/height")
        self.T = rospy.get_param("parameters/period")
        if self.__real == 0: 
            self.pub = rospy.Publisher("turtle1/cmd_vel", Twist, queue_size=10)
            self.stop = rospy.Publisher("turtle1/cmd_vel", Twist, queue_size=10)
        elif self.__real == 1:
            self.pub = rospy.Publisher("/cmd_vel", Twist, queue_size=10)
            self.stop = rospy.Publisher("/cmd_vel", Twist, queue_size=10)
        self.rate = rospy.Rate(self.__pub_freq)
        self.figure_eight = FigureEight(self.W, self.H, self.T)
        self.flag = False  # use for time and pause/resume
        self.__t = rospy.get_time()
        self.t_paused = rospy.get_time()
        self.t_diff = 0
        self.theta = self.figure_eight.theta0(self.__t)

        # static broadcaster 
        self.static_broadcaster = tf2_ros.StaticTransformBroadcaster()

        q1 = transformations.quaternion_from_euler(0, 0 , self.theta)

        static_broadcaster = TransformStamped()
        static_broadcaster.header.stamp = rospy.Time.now()
        static_broadcaster.header.frame_id = "world"
        static_broadcaster.child_frame_id = "odom"

        static_broadcaster.transform.translation.x = 5
        static_broadcaster.transform.translation.y = 5
        static_broadcaster.transform.translation.z = 0

        static_broadcaster.transform.rotation.x = q1[0]
        static_broadcaster.transform.rotation.y = q1[1]
        static_broadcaster.transform.rotation.z = q1[2]
        static_broadcaster.transform.rotation.w = q1[3]
        
        self.static_broadcaster.sendTransform(static_broadcaster)

    def pause(self, event=None):
        """ Pause function for the pause service 

        Stops the turtle/robot movement without affecting its trajectory 

        Args: 
            event (None) : default empty argument to allow service to be called 

        Returns:
            EmptyResponse, empty response when calling the service 
        
        """
        self.flag = False
        self.t_paused = rospy.get_time()
        return EmptyResponse()

    def resume(self, event=None):
        """ Resume function for the resume service 

        Resumes the turtle/robot movement along the same initial trajectory 

        Args: 
            event (None) : default empty argument to allow service to be called 

        Returns:
            EmptyResponse, empty response when calling the service 
        
        """
        self.flag = True
        self.t_diff += rospy.get_time() - self.t_paused
        return EmptyResponse()

    def pathing(self, event=None):
        """ Function to publish the turtle/robot movement 

        Takes the time difference and publishes the linear and angular velocity 

        Args:
            event (None) : default empty argument to allow service to be called 
            v : linear velocity 
            w : angular velocity 

        Returns: 
            Movement, Twist data 
        """    
        t = rospy.get_time() - self.__t - self.t_diff
        #print(t)
        self.x, self.y, v, w = self.figure_eight.get_velocity(t)
        #print(f"x =  {v}") 
        movement = Twist(Vector3(x=v, y=0, z=0), Vector3(x=0, y=0, z=w))
        #print(f"v and w = {movement}")
        self.pub.publish(movement)
        self.rate.sleep()
    
    def move(self):
        """ Function to run the ros publishing loop 
        
        Runs rospy loop and sets options for paused or resumed movement 

        Args: 
            self.flag : flag value to determine paused (False) or resumed (True)

        Returns: 
            Pathing, function call for movement 
            Publishes zero velocities 
        """
        while not rospy.is_shutdown():
            if self.flag == True:
                self.pathing()
            else:
                self.pub.publish(Twist(Vector3(x=0,y=0,z=0), Vector3(x=0,y=0,z=0)))
                self.rate.sleep()

if __name__=='__main__':
    rospy.init_node("trajectory", log_level=rospy.DEBUG)
    node = Trajectory()
    node.move()
    rospy.spin()
    