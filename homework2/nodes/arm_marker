#!/usr/bin/env python

"""
Draws markers in rviz at the end effector position displaying positive and negative x position

PUBLISHERS:
    + /shape (Marker) ~ publishes the marker 

PARAMETERS:
    + /T ~ period for cycle 

"""

import rospy
from geometry_msgs.msg import PoseStamped, Pose, Point, Quaternion
from visualization_msgs.msg import Marker
import tf2_ros

class ArmMarker():
    """ Publishes markers according to transforms between robot base_link and end effector
    """
    def __init__(self):
        self.T = rospy.get_param("T")
        self.pub_marker = rospy.Publisher("shape", Marker, queue_size=10)
        self.rate = rospy.Rate(10)
        self.buffer = tf2_ros.Buffer()
        self.listener = tf2_ros.TransformListener(self.buffer)
        self.flag = 0  # set counter value

    def draw_marker(self):
        """ Function called for drawing the markers 

        Draws markers given position, sphere's for positive x location and cylinder for negative

        Args:
            T : period in seconds 

        Returns:
            Publishes marker at given position according to x sign
        """
        self.marker = Marker()
        self.marker.lifetime = rospy.Duration(self.T/5)
        self.marker.header.frame_id = "link3"
        self.marker.header.stamp = rospy.Time()
        self.marker.id = self.flag
        self.marker.action = Marker.ADD
        self.marker.scale.x = 0.1
        self.marker.scale.y = 0.1
        self.marker.scale.z = 0.1
        self.marker.pose.orientation.w = 1.0
        self.marker.pose.position.x = 0
        self.marker.pose.position.y = 0
        self.marker.pose.position.z = 0
        if self.x > 0: 
            self.marker.type = Marker.SPHERE
            self.marker.color.a = 1.0
            self.marker.color.r = 0.0
            self.marker.color.g = 1.0
            self.marker.color.b = 0.0
        elif self.x < 0:
            self.marker.type = Marker.CYLINDER
            self.marker.color.a = 1.0
            self.marker.color.r = 0.0
            self.marker.color.g = 0.0
            self.marker.color.b = 1.0
        self.pub_marker.publish(self.marker)
        self.flag += 1

    def run(self):
        """ Function to run the ros publishing loop 

            Uses a try and except statement to listen to the frame if it has been published

            Args: 
                Transform between base_link and link3 (end effector)
                X position of the transform

            Returns:
                draw_marker() function to draw markers 
                Given notification if exceptions
        """
        while not rospy.is_shutdown():
           try:
               trans = self.buffer.lookup_transform("base_link", "link3", rospy.Time())
               self.x = trans.transform.translation.x
               rospy.loginfo("Transform is: " + str(trans))
               self.draw_marker()
           except tf2_ros.LookupException as e:
               # the frames don't exist yet
               rospy.loginfo("Lookup exception: " + str(e))
           except tf2_ros.ConnectivityException as e:
               # the tf tree has a disconnection
               rospy.loginfo("Connectivity exception: " + str(e))
           except tf2_ros.ExtrapolationException as e:
               # the times are two far apart to extrapolate
               rospy.loginfo("Extrapolation exception: " + str(e))
           finally:
               self.rate.sleep()

if __name__ == "__main__":
    rospy.init_node("arm_marker", log_level = rospy.DEBUG)
    node = ArmMarker()
    node.run()
