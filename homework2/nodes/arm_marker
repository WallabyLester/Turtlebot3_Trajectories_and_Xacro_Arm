#!/usr/bin/env python

"""
arm_marker node that draws markers in rviz at the end effector position
"""

import rospy
from geometry_msgs.msg import PoseStamped, Pose, Point, Quaternion
from visualization_msgs.msg import Marker
import tf2_ros

class ArmMarker():

    def __init__(self):
        self.T = rospy.get_param("parameters/period")
        self.pub_marker = rospy.Publisher("shape", Marker, queue_size=10)
        self.rate = rospy.Rate(10)
        self.buffer = tf2_ros.Buffer()
        self.listener = tf2_ros.TransformListener(self.buffer)
        self.flag = 0

    def draw_marker(self):

        self.marker = Marker()
        self.marker.lifetime = rospy.Duration(self.T/5)
        self.marker.header.frame_id = "link3"
        self.marker.header.stamp = rospy.Time()
        self.marker.id = self.flag
        self.marker.action = Marker.ADD
        self.marker.scale.x = 0.1
        self.marker.scale.y = 0.1
        self.marker.scale.z = 0.1
        if self.x > 0: 
            self.marker.type = Marker.SPHERE
            self.marker.color.a = 1.0
            self.marker.color.r = 0.0
            self.marker.color.g = 1.0
            self.marker.color.b = 0.0
        elif self.x < 0:
            self.marker.type = Marker.CYLINDER
            self.marker.color.a = 1.0
            self.marker.color.r = 0.0
            self.marker.color.g = 0.0
            self.marker.color.b = 1.0
        self.pub_marker.publish(self.marker)
        self.flag += 1

    def run(self):
        while not rospy.is_shutdown():
           # we listen in a try block.  If a frame has not been published
           # recently enough, then there will be an error and we continue
           try:
               # get the latest transform between left and right
               trans = self.buffer.lookup_transform("base_link", "link3", rospy.Time())
               self.x = trans.transform.translation.x
               rospy.loginfo("Transform is: " + str(trans))
               self.draw_marker()
           except tf2_ros.LookupException as e:
               # the frames don't exist yet
               rospy.loginfo("Lookup exception: " + str(e))
           except tf2_ros.ConnectivityException as e:
               # the tf tree has a disconnection
               rospy.loginfo("Connectivity exception: " + str(e))
           except tf2_ros.ExtrapolationException as e:
               # the times are two far apart to extrapolate
               rospy.loginfo("Extrapolation exception: " + str(e))
           finally:
               self.rate.sleep()

if __name__ == "__main__":
    rospy.init_node("arm_marker", log_level = rospy.DEBUG)
    node = ArmMarker()
    node.run()
    rospy.spin()
